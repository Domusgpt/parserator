// packages/api/src/models.ts
import { Timestamp } from 'firebase-admin/firestore'; // Correct import for Timestamp

export interface User {
  id?: string; // Firestore document ID
  email: string;
  stripeCustomerId?: string; // Optional: To be used with Stripe integration
  subscriptionTier: 'free' | 'pro' | 'enterprise' | 'admin'; // Added 'admin' tier
  monthlyUsage: {
    count: number;
    lastReset: Timestamp;
  };
  createdAt: Timestamp;
  isActive: boolean;
}

// Define specific payload interfaces
export interface DocumentParsedPayload {
  documentId: string;
  jobId?: string; // Optional: if part of a larger job
  originalFileName?: string;
  extractedData: any; // Consider a more specific type if the structure of extractedData is known
  parseStatus: 'success';
  parsedAt: Timestamp;
}

export interface DocumentFailedPayload {
  documentId: string;
  jobId?: string; // Optional
  originalFileName?: string;
  error: {
    message: string;
    code?: string; // e.g., 'parsing_error', 'timeout', 'unsupported_format'
  };
  parseStatus: 'failure';
  failedAt: Timestamp;
}

export interface JobStatusUpdatePayload {
  jobId: string;
  status: 'processing' | 'completed' | 'failed';
  progress?: number; // Optional progress percentage (0-100)
  message?: string; // Optional message, e.g., "Step 3/5 completed" or error details for failed job
  updatedAt: Timestamp;
}


// Updated WebhookEventName to be more generic and cover suggested cases
export type WebhookEventName =
  | 'document.parsed'
  | 'document.failed'
  | 'job.status.updated';
  // Add other event names as your application evolves, e.g.:
  // | 'user.created'
  // | 'subscription.updated'

export interface Webhook {
  id?: string; // Firestore document ID
  userId: string; // Link to the User who owns this webhook
  targetUrl: string; // The URL to send the webhook to
  eventNames: WebhookEventName[]; // Array of event names this webhook subscribes to
  secretKey: string; // For signing payloads (HMAC) - generated by the system
  createdAt: Timestamp;
  isActive: boolean;
  lastDispatchAt?: Timestamp; // Optional: track last successful dispatch
  lastFailureAt?: Timestamp; // Optional: track last failed dispatch
}

export interface ApiKey {
  id?: string; // Firestore document ID
  userId: string; // Links to User collection
  keyHash: string; // bcrypt hash of the actual key
  keyPrefix: string; // e.g., "pk_live_" or "pk_test_" to quickly identify key type
  createdAt: Timestamp;
  lastUsedAt?: Timestamp; // Optional: track last usage
  expiresAt?: Timestamp; // Optional: for keys that can expire
  isActive: boolean;
  name?: string; // User-friendly name for the key
  tierWhenCreated: 'free' | 'pro' | 'enterprise' | 'admin'; // Store the tier associated at creation
}
