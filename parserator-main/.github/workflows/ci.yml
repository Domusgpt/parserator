name: 🏛️ EMA Compliance CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.8'

jobs:
  # EMA Compliance Check - First Priority
  ema-compliance:
    name: 🏛️ EMA Compliance Verification
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: EMA Digital Sovereignty Check
        run: |
          echo "🔍 Checking Digital Sovereignty compliance..."
          npm run test:ema:sovereignty

      - name: EMA Portability Check
        run: |
          echo "🔍 Checking Portability-First compliance..."
          npm run test:ema:portability

      - name: EMA Standards Agnostic Check
        run: |
          echo "🔍 Checking Standards Agnostic compliance..."
          npm run test:ema:standards

      - name: EMA Transparent Competition Check
        run: |
          echo "🔍 Checking Transparent Competition compliance..."
          npm run test:ema:competition

      - name: Generate EMA Compliance Report
        run: |
          npm run ema:report
          cat ema-compliance-report.json

      - name: Upload EMA Compliance Report
        uses: actions/upload-artifact@v3
        with:
          name: ema-compliance-report
          path: ema-compliance-report.json

  # Code Quality and Testing
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    needs: ema-compliance
    strategy:
      matrix:
        node-version: [16, 18, 20]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit

      - name: Run integration tests
        run: npm run test:integration

      - name: Run agent framework tests
        run: |
          echo "🤖 Testing agent framework compatibility..."
          npm run test:frameworks

      - name: Generate test coverage
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Agent Framework Compatibility
  agent-compatibility:
    name: 🤖 Agent Framework Compatibility
    runs-on: ubuntu-latest
    needs: ema-compliance
    strategy:
      matrix:
        framework: [adk, mcp, langchain, crewai, autogpt]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          npm ci
          pip install -r requirements-test.txt

      - name: Test ${{ matrix.framework }} integration
        run: |
          echo "🧪 Testing ${{ matrix.framework }} framework integration..."
          npm run test:framework:${{ matrix.framework }}

      - name: Test ${{ matrix.framework }} export functionality
        run: |
          echo "📤 Testing ${{ matrix.framework }} export capabilities..."
          npm run test:export:${{ matrix.framework }}

      - name: Test ${{ matrix.framework }} migration paths
        run: |
          echo "🔄 Testing ${{ matrix.framework }} migration pathways..."
          npm run test:migration:${{ matrix.framework }}

  # Security and Vulnerability Scanning
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: ema-compliance
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, typescript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium

  # Export and Migration Testing
  export-migration:
    name: 📤 Export & Migration Testing
    runs-on: ubuntu-latest
    needs: ema-compliance
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Test complete data export
        run: |
          echo "📋 Testing complete data export functionality..."
          npm run test:export:complete

      - name: Test competitor migration paths
        run: |
          echo "🌉 Testing migration paths to competitors..."
          npm run test:migration:competitors

      - name: Test format portability
        run: |
          echo "📄 Testing data format portability..."
          npm run test:formats:portability

      - name: Test export performance
        run: |
          echo "⚡ Testing export performance benchmarks..."
          npm run test:export:performance

      - name: Generate migration compatibility report
        run: |
          npm run report:migration:compatibility
          cat migration-compatibility-report.json

      - name: Upload migration report
        uses: actions/upload-artifact@v3
        with:
          name: migration-compatibility-report
          path: migration-compatibility-report.json

  # Documentation and Examples
  documentation:
    name: 📚 Documentation Build
    runs-on: ubuntu-latest
    needs: ema-compliance
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build API documentation
        run: |
          echo "📖 Building API documentation..."
          npm run docs:api

      - name: Build EMA compliance documentation
        run: |
          echo "🏛️ Building EMA compliance documentation..."
          npm run docs:ema

      - name: Build migration guides
        run: |
          echo "🔄 Building migration guides..."
          npm run docs:migration

      - name: Validate example code
        run: |
          echo "🧪 Validating example code..."
          npm run examples:validate

      - name: Test documentation links
        run: |
          echo "🔗 Testing documentation links..."
          npm run docs:linkcheck

      - name: Upload documentation
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: docs/build/

  # Performance Benchmarks
  performance:
    name: ⚡ Performance Benchmarks
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run parsing performance benchmarks
        run: |
          echo "📊 Running parsing performance benchmarks..."
          npm run benchmark:parsing

      - name: Run export performance benchmarks
        run: |
          echo "📤 Running export performance benchmarks..."
          npm run benchmark:export

      - name: Run framework compatibility benchmarks
        run: |
          echo "🤖 Running framework compatibility benchmarks..."
          npm run benchmark:frameworks

      - name: Generate performance report
        run: |
          npm run benchmark:report
          cat performance-report.json

      - name: Upload performance report
        uses: actions/upload-artifact@v3
        with:
          name: performance-report
          path: performance-report.json

  # Build and Release
  build:
    name: 🏗️ Build and Package
    runs-on: ubuntu-latest
    needs: [test, agent-compatibility, security, export-migration]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build packages
        run: |
          echo "🔧 Building all packages..."
          npm run build

      - name: Build MCP server
        run: |
          echo "🤖 Building MCP server..."
          npm run build:mcp

      - name: Build SDKs
        run: |
          echo "📦 Building SDKs..."
          npm run build:sdks

      - name: Package for distribution
        run: |
          echo "📋 Packaging for distribution..."
          npm run package

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: dist/

  # Deployment (only on main branch and releases)
  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: [build, documentation, performance]
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: dist/

      - name: Deploy to staging (main branch)
        if: github.ref == 'refs/heads/main'
        run: |
          echo "🚧 Deploying to staging environment..."
          # Deployment script here

      - name: Deploy to production (release)
        if: github.event_name == 'release'
        run: |
          echo "🎉 Deploying to production environment..."
          # Production deployment script here

      - name: Publish npm packages
        if: github.event_name == 'release'
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "📦 Publishing npm packages..."
          npm run publish:packages

      - name: Update EMA compliance registry
        if: github.event_name == 'release'
        run: |
          echo "🏛️ Updating EMA compliance registry..."
          npm run ema:registry:update

  # Notification
  notify:
    name: 📢 Notification
    runs-on: ubuntu-latest
    needs: [ema-compliance, test, agent-compatibility, security, export-migration, documentation, performance, build]
    if: always()
    
    steps:
      - name: Notify Discord on success
        if: success()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          curl -H "Content-Type: application/json" \
               -d '{"content": "✅ **EMA Compliance CI/CD Success** \n🏛️ All EMA principles verified\n🤖 Agent frameworks compatible\n📤 Export/migration tests passed\n🚀 Ready for deployment"}' \
               $DISCORD_WEBHOOK

      - name: Notify Discord on failure
        if: failure()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          curl -H "Content-Type: application/json" \
               -d '{"content": "❌ **EMA Compliance CI/CD Failure** \n⚠️ Check failed jobs\n🔧 EMA principles may be violated\n📋 Review compliance reports"}' \
               $DISCORD_WEBHOOK

      - name: Update status badge
        run: |
          echo "🏷️ Updating repository status badges..."
          # Update README badges based on results